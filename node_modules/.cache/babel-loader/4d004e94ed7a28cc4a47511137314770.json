{"ast":null,"code":"/**\n * Simple sanitization. It is not intended to sanitize\n * malicious element values.\n *\n * character | escaped\n *      <       &lt;\n *      >       &gt;\n *      (       &#40;\n *      )       &#41;\n *      #       &#35;\n *      &       &amp;\n *      \"       &quot;\n *      '       &apos;\n */\n// used for body text\nvar charsEscape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;'\n};\nvar charsUnescape = {\n  '&amp;': '&',\n  '&#35;': '#',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&#40;': '(',\n  '&#41;': ')',\n  '&quot;': '\"',\n  '&apos;': \"'\",\n  \"&#31;\": \"\\x1F\"\n}; // used in attribute values\n\nvar charsAttrEscape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&apos;'\n};\n\nfunction escapeRegExp(string) {\n  return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n} // sanitize body text\n\n\nexports.sanitize = function sanitize(value, reverse, attribute) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  var chars = reverse ? charsUnescape : attribute ? charsAttrEscape : charsEscape;\n  var keys = Object.keys(chars);\n  keys.forEach(function (key) {\n    value = value.replace(new RegExp(escapeRegExp(key), 'g'), chars[key]);\n  });\n  return value;\n};","map":null,"metadata":{},"sourceType":"script"}